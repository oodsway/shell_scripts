#!/usr/bin/env bash

# Author: Woods Wannamaker
# Date: 2016-09-11
# Purpose: Script for deleting old, unused kernel images, inspired by NixCraft's blog
# http://www.cyberciti.biz/faq/debian-ubuntu-linux-delete-old-kernel-images-command/
#
#------------------------------------------------------------------------------
# Change Log
# 2019-03-09: removed change log history. Deprecated use in favor of aliases:
# alias rccheck='dpkg -l | grep ^rc | awk '\''{print $2}'\'''
# alias rcpurge='sudo apt-get remove --purge $(dpkg -l | grep ^rc | \
# awk '\''{print $2}'\'' | tr '\''\n'\'' '\'' '\'')'
#------------------------------------------------------------------------------

clear

RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
MAGENTA="\033[0;35m"
CYAN="\033[0;36m"
RESET="\033[0m"

get_kernels () {
# Function. Creates list of either installed (ii) or removed (rc) kernel images depending
# on value of status variable $1 passed to function.

    dpkg --list | awk -v status="$1" '/linux-(image|image-extra|headers)/ {if ($1 ~ status) {print $2} }'

return 0
}

ii_kernel_list=( $(get_kernels "^ii") )
rc_kernel_list=( $(get_kernels "^rc") )

if [ ${#rc_kernel_list[@]} = 0 ]; then
    printf "%s\n" "List of installed (ii) kernels (${#ii_kernel_list[@]} items) DO NOT REMOVE:" 
    printf "$GREEN%-40s %-40s %-40s$RESET\n" "${ii_kernel_list[@]}"
    printf "\n"
    
    printf "\n$RED%s$RESET\n\n" "No rc kernels to process! Exiting..."
    exit 0
else
    current_kernel=$( uname -r )
    remove_list=( )
    keep_list=( )
fi

printf "%s\n" "List of installed (ii) kernels (${#ii_kernel_list[@]} items) DO NOT REMOVE:" 
printf "$RED%-40s %-40s %-40s$RESET\n" "${ii_kernel_list[@]}"
printf "\n"
printf "%s" "The current kernel is: " "$current_kernel"
printf "\n\n%s\n" "List of remove/deinstall (rc) kernels (${#rc_kernel_list[@]} items) SAFE TO REMOVE:"
printf "$GREEN%-40s %-40s %-40s$RESET\n" "${rc_kernel_list[@]}"
printf "\n"

status_report () {
# Function. Displays lists status to screen.

    printf "%s\n" "Remove list contains ${#remove_list[@]} items: "
    printf "$MAGENTA%-40s %-40s %-40s$RESET\n"  "${remove_list[@]}"
    printf "\n"
    
    printf "%s\n" "Keep list contains ${#keep_list[@]} items: "
    printf "$CYAN%-40s %-40s %-40s$RESET\n"  "${keep_list[@]}"
    printf "\n"

    printf "%s\n" "Remaining list contains ${#rc_kernel_list[@]} items:"
    printf "$GREEN%-40s %-40s %-40s$RESET\n" "${rc_kernel_list[@]}"
    printf "\n"
    
return 0
}

select_kernels () {
# Function. User selects individual kernels to remove. Can list, finish or quit
# or quit process completely.

i=0; j=0
while (( ${#rc_kernel_list[@]} > j )); do
    kernel=${rc_kernel_list[$i]}
    
    read -r -p "Select (r)emove; (k)eep; (l)ist; (f)inish; (q)uit for:  $( printf "$YELLOW%s$RESET"  "$kernel" ): " answer
        case $answer in
            "r")
                remove_list=( "${remove_list[@]}" "$kernel" )
                rc_kernel_list=( ${rc_kernel_list[@]/$kernel} )
                printf "$MAGENTA%s$RESET\n" " $kernel added to the remove list"
                ;;
            "k")
                keep_list=( "${keep_list[@]}" "$kernel" )
                rc_kernel_list=( ${rc_kernel_list[@]/$kernel} )
                printf "$CYAN%s$RESET\n" " $kernel added to the keep list"
                ;;
            "l")
                clear
                status_report
                ;;
            "q")
                echo "...exiting. ${#rc_kernel_list[@]} kernels remain in the list."
                exit 0
                ;;
            "f")
                j=${#rc_kernel_list[@]}
                ;;
            *) clear; echo invalid option;;
        esac 
        
    kernels_to_consider=$(( ${#rc_kernel_list[@]} - j))
    printf "%s\n\n" "...${#rc_kernel_list[@]} remain in the list, $kernels_to_consider kernels remain to consider."
done

return 0
}

display_dots () {
# Display messages and a 3 second countdown timer.

    printf '%b%s%b\n' "$GREEN""Executing sudo apt-get --purge remove command""$RESET"
    printf '%b%s%b' "$YELLOW""ABORT IS STILL POSSIBLE. JUST CHOOSE [n] AT NEXT MENU""$RESET"
    printf '%s' "..."
    for i in {3..1}; do
        printf '%s'"$i..."
        sleep 1
    done
    printf "\n\n"

return 0
}

main () {
#Function. Controls removal of ALL or SELECTED kernels or EXIT of program. 

while true; do
    read -r -p "Remove (a)ll | (s)elected rc kernels or (q)uit: " choice    
    case $choice in
        "a")  
            display_dots
            sudo apt-get --purge remove "${rc_kernel_list[@]}"
            printf '\n%s\n' "Exiting..."
            exit 0
            ;;        
        "s") 
            clear
            select_kernels
            if [ ${#remove_list[@]} = 0 ]; then
                printf "$GREEN%s$RESET\n\n" "Nothing to purge. Exiting..."
            else
                clear
                status_report
                while true; do
                read -r -p "Enter (Y)es to remove | (q) to quit | (p)revious menu: " option
                case $option in
                    "Y")                
                        display_dots
                        sudo apt-get --purge remove "${remove_list[@]}"
                        printf '\n%s\n' "Exiting..."
                        exit 0
                        ;;
                    "q")
                        printf "$GREEN%s$RESET\n\n" "No changes made. Exiting..."
                        exit 0
                        ;;
                    "p")
                        printf "$GREEN%s$RESET\n\n" "Returning to previous menu..."
                        select_kernels
                        ;;
                    *)  echo invalid option;;
                esac
                done
            fi
            ;;
        "q")
            printf "$GREEN%s$RESET\n\n" "No changes made. Exiting..."
            break
            ;;
        *) echo invalid option;;
    esac
done

return 0
}

main
