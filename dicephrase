#!/usr/bin/env bash

# Program: dicephrase
# Author: Woods Wannamaker
# Date: 2018-07-17
# Purpose: A simple diceware passphrase algorithm using EFF large word list.
# Source: https://www.eff.org/dice
#
#------------------------------------------------------------------------------
# Change Log
# 2019-04-15: Added /dev/urandom for random number generation.
#------------------------------------------------------------------------------

########################## BRIEF INSTRUCTIONS ##########################
# Run dicephrase with or without options
# ~$: ./dicephrase (words_per_phrase) (number_of_phrases)

# with both options spcified:
# ~$: ./dicephrase 7 30
# will generate 30 phrases with 7 words_per_phrase

# with a single option (words_per_phrase) specified:
# ~$: ./dicephrase 8
# will generate 1 phrase with 8 words_per_phrase

# with a single option (number_of_phrases) specified:
# ~$: ./dicephrase "" 5
# will generate 5 phrases with 6 words_per_phrase

# without options
# ~$: ./dicephrase
# will generate the default: 1 phrase with 6 words_per_phrase
########################################################################

words_per_phrase=${1:-6}
number_of_phrases=${2:-1}
number_of_dice=5
phrase=( )
keys=( )

# Edit paths below for your system.
wordlist="$HOME/bin/eff_large_wordlist.txt"
dicelog="$HOME/bin/dicephrase_log.txt"
download_path="$HOME/bin/"
eff_url="https://www.eff.org/files/2016/07/18/eff_large_wordlist.txt"

net_test=$(ping -c1 -W1 8.8.8.8 > /dev/null 2>&1 && echo $?)

if [ ! -f  "${wordlist}" ]
then
    if [ "$net_test" == 0 ]
    then
        wget -a "$dicelog" -P "$download_path" "${eff_url}"
    else
        printf '%s\n' "Error! An internet connection required to download word list."
        exit 1
    fi
fi

roll_dice () {
# generate-random-numbers-in-specific-range
# Source: https://unix.stackexchange.com/questions/140750/

    for ((i==1; i<number_of_dice; i++))
    do
#         rolls+=$(( RANDOM % 6 + 1 ))
#         rolls+=$(shuf -i 1-6 -n 1)
        rolls+=$(head -100 /dev/urandom | tr -dc '1-6' | fold -w 1 | head -n 1)
    done
     
    echo "$rolls"
    
return 0
}

get_phrase () {

    while [ "${#phrase[@]}" -le "$((words_per_phrase-1))" ]
    do
        key=$(roll_dice)

        if [ "$( grep -c "$key"  "$wordlist" )" -eq 1 ]
        then
            keys+=( "$key" )
            word=$(awk -v val="$key" '{ if ($1==val)  {print $2} }' "$wordlist")
            phrase+=( "$word" )
        fi
    done
    
return 0
}

main () {
for ((c==1; c<number_of_phrases; c++))
do
    get_phrase

# Uncomment to show keys
#     printf '%s\n' "${keys[*]}"
    printf '%s\n' "${phrase[*]}"
    
    phrase=( )
    keys=( )

done

return 0
}

clear
main
