#! /usr/bin/env bash

# Author: Woods Wannamaker
# Date: 2016-05-03
# Purpose: Simulates Data drive rsync synchronization then provides 
# option to perform synchronization.

#------------------------------------------------------------------------------
# Change Log
# 2018-10-27: unset with -v (treat as variable) option used. Citations added.
#------------------------------------------------------------------------------

# Define colors:
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
WHITE="\033[0;37m"
RESET="\033[0m"

#Define messages:
ERROR1="***** Source Drive NOT Mounted! Program terminated with exit code: 1 *****"
ERROR2="***** Exclusion list not found! Exiting...with error code: 2 *****"
BANNER1="The following target drives will be compared with the source drive: "
SIMMSG1="Simulation complete. The following drive(s) need to be synchronized:"
SIMMSG2="Simulation complete. No Files to Synchronize. Logs removed. Exiting."
SYNCMSG1="Synchronization complete. Log files have been archived."
SYNCMSG2="Synchronization complete. Log files could NOT be archived. Check Directory Name."
ABORTMSG="***** Process Aborted by User *****"

# Store choice of rsync --dry-run or rsync in array SYNCTYPE
SYNCTYPE=( "rsync --dry-run" "rsync " )

# If SOURCE drive not mounted, exit, else define TARGET_LIST, NOW, ARKDIR & EXCLUDE_LIST.
SOURCE=/media/woods/Data/
if ! (mountpoint -q "$SOURCE")
then
    printf "\n%b%s%b\n\n"  "$RED" "$ERROR1" "$RESET"
    exit 1
else
    TARGET_LIST=( $(mount | awk '/\/media\/woods\/Data-/ {print $3}' | sort -u) )
    NOW=$(date +%F_%T)
    ARKDIR=/home/woods/backup_log-files/backups_completed/"$NOW"
    EXCLUDE_LIST=/home/woods/xlists/x-datasync
    
    if ! [[ -f "$EXCLUDE_LIST" ]]
    then
        printf "\n%b%s%b\n\n" "$RED" "$ERROR2" "$RESET"
        exit 2
    fi
fi

clean_files () {
# Function moves log files to NOW directory in backups_completed directory

    mkdir "$ARKDIR"
    if [[ -d "$ARKDIR" ]]
    then
        mv /home/woods/backup_log-files/*"$NOW" "$ARKDIR"
        cat "$ARKDIR/"Data-* > "$ARKDIR/""sim-sync_$NOW"
        rm -f "$ARKDIR/"Data-*
        echo -e "$GREEN""$SYNCMSG1" "$RESET"
    else
        echo -e "$YELLOW""$SYNCMSG2" "$RESET"
    fi
 
return 0
}

sync_control () {
# Function simulates or processes rsync synchronization with any drives that may be mounted

    local temp_array=( )
    local list_len="${#TARGET_LIST[@]}"
    
    # Store a  local copy of TARGET_LIST in mount_list
    mount_list=( "${TARGET_LIST[@]}" )  
    for i in "${!mount_list[@]}"
    do
        TARGET="${mount_list[i]}/"
        
        # Build log_filename for LOG from TARGET path
        log_filename=$(basename "$TARGET" )_$1_$NOW
        LOG=/home/woods/backup_log-files/"${log_filename}"
        echo "***** $(date -R) *****" > "$LOG"        
                
        # Terminate if SOURCE drive not mounted. This is an extra check.              
        if ! (mountpoint -q "$SOURCE")
        then
            {
            printf "\n%b%s%b\n\n"  "$RED" "$ERROR1" "$RESET"
            } | tee -a "$LOG"
            exit  1
        # If TARGET drive not mounted, continue but log event.
        elif ! (mountpoint -q "$TARGET")
        then
            {
            echo -e "$YELLOW***** Excluded  $TARGET  drive NOT Mounted! *****$RESET"
            printf "\n" 
            } | tee -a "$LOG"
        else
        
        ############################# RSYNC BLOCK #############################
            {
            echo -e "$GREEN$2 $TARGET with $SOURCE $RESET"
            
            ${SYNCTYPE[$3]} -rpgDvOult --progress --delete --modify-window=1 \
            --exclude-from=$EXCLUDE_LIST --human-readable --stats \
            "$SOURCE" "$TARGET"
                               
            printf "\n"
            } | tee -a "$LOG"
        ############################# RSYNC BLOCK #############################

        fi
        
        # Examine rsync stats in LOG for number files created, deleted, and transferred
        created=$(awk '/Number of created files:/ {print $5}' "$LOG")
        deleted=$(awk '/Number of deleted files:/ {print $5}' "$LOG")       
        xferred=$(awk '/Number of regular files transferred:/ {print $6}' "$LOG")
        
        # If created, deleted && xferred 0, no sync needed; safely remove the target drive from TARGET_LIST
        # Source: https://stackoverflow.com/questions/16860877/remove-an-element-from-a-bash-array
        if [[ "$created" -eq 0 ]] &&  [[ "$deleted" -eq 0 ]] && [[ "$xferred" -eq 0 ]]
        then
            # unset -v option source: http://wiki.bash-hackers.org/commands/builtin/unset
            # See also Destruction: http://wiki.bash-hackers.org/syntax/arrays?s[]=array
            unset -v 'TARGET_LIST[i]'
        fi

    done

    # Re-index TARGET_LIST array if greater than zero and shorter than original.
    if [[ "${#TARGET_LIST[@]}" -gt 0 ]] && [[ "${#TARGET_LIST[@]}" -lt "$list_len" ]]
    then
        temp_array=( "${TARGET_LIST[@]}" )
        unset TARGET_LIST
        TARGET_LIST=( "${temp_array[@]}" )
        unset temp_array        
    fi
    
return 0
}

main () {
# Function controls overall program flow. Calls sync_control function; displays process messages.

    clear
    echo -e "$WHITE""$BANNER1""$SOURCE" "$RESET"
    for i in "${!TARGET_LIST[@]}"
    do
        echo -e "$YELLOW" "${TARGET_LIST[i]}" "$RESET"
    done
    echo
    
# sync_control with option 0 == rsync --dry-run (simulate sychronization) 
    sync_control sim Simulating 0
    
    if [[ "${#TARGET_LIST[@]}" -eq 0 ]]
    then
        echo -e "$GREEN""$SIMMSG2 $RESET"
        rm -f /home/woods/backup_log-files/*"$NOW"
    else
        echo -e "$GREEN""$SIMMSG1" "$RESET"
        for i in "${!TARGET_LIST[@]}"
        do
            echo -e "$YELLOW" "${TARGET_LIST[i]}" "$RESET"
        done
        echo        
        
        while true
        do
            read -r -p "Enter [YES] to Sync or [q] to Quit: " ANSWER
            case $ANSWER in
                "YES")
# sync_control with option 1 == rsync (perform sychronization)
                    sync_control sync Synchronizing 1
                    clean_files 
                    break
                    ;;
                "q")
                    printf "\n%b%s%b\n\n" "$YELLOW" "$ABORTMSG" "$RESET"
                    rm -f /home/woods/backup_log-files/*"$NOW"
                    break
                    ;;
                *) echo invalid response;;
            esac
        done
    fi
    
return 0
}

main
