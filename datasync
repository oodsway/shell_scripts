#! /usr/bin/env bash

# Author: Woods Wannamaker
# Date: 2016-05-03
# Purpose: Simulates Data drive rsync synchronization then provides 
# option to perform synchronization.

#------------------------------------------------------------------------------
# Change Log
# 2018-12-28: Variable names now lower case. Log archive simplified.
#------------------------------------------------------------------------------

# Definitions:
source=/media/woods/Data/
sync_type=( "rsync --dry-run" "rsync " )
exclude_list=/home/woods/xlists/x-datasync
ark_dir=/home/woods/backup_log-files/backups_completed/

# Colors:
red="\033[0;31m"
green="\033[0;32m"
yellow="\033[0;33m"
white="\033[0;37m"
reset="\033[0m"

# Messages:
error1="***** Source Drive NOT Mounted! Program terminated with exit code: 1 *****"
error2="***** Exclusion list not found! Exiting...with error code: 2 *****"
banner1="The following target drives will be compared with the source drive: "
sim_msg1="Simulation complete. The following drive(s) need to be synchronized:"
sim_msg2="Simulation complete. No Files to Synchronize. Logs removed. Exiting."
sync_msg1="Synchronization complete. Log files have been archived."
sync_msg2="Synchronization complete. Log files could NOT be archived. Check Directory Path/Name."
abort_msg="***** Process Aborted by User *****"

if ! (mountpoint -q "$source")
then
    printf "\n%b%s%b\n\n"  "$red" "$error1" "$reset"
    exit 1
elif ! [[ -f "$exclude_list" ]]
then
    printf "\n%b%s%b\n\n" "$red" "$error2" "$reset"
    exit 2
else
    target_list=( $(mount | awk '/\/media\/woods\/Data-/ {print $3}' | sort -u) )
    now=$(date +%F_%T)
fi

clean_files () {
# Function archives a session log in backups_completed directory

    if [[ -d "$ark_dir" ]]
    then
        mv /home/woods/backup_log-files/*"$now" "$ark_dir"
        cat "$ark_dir"Data-* > "$ark_dir""$now""_sync-log.txt"
        rm -f "$ark_dir"Data-*
        echo -e "$green""$sync_msg1" "$reset"
    else
        echo -e "$yellow""$sync_msg2" "$reset"
    fi
 
return 0
}

sync_control () {
# Function simulates or processes rsync synchronization with any drives that may be mounted

    local temp_array=( )
    local list_len="${#target_list[@]}"
    
    # Store a  local copy of target_list in mount_list
    mount_list=( "${target_list[@]}" )  
    for i in "${!mount_list[@]}"
    do
        target="${mount_list[i]}/"
        
        # Build log_filename for log_progress from target path
        log_filename=$(basename "$target" )_$1_$now
        log_progress=/home/woods/backup_log-files/"${log_filename}"
        echo "***** $(date -R) *****" > "$log_progress"        
                
        # Terminate if source drive not mounted. This is an extra check.              
        if ! (mountpoint -q "$source")
        then
            {
            printf "\n%b%s%b\n\n"  "$red" "$error1" "$reset"
            } | tee -a "$log_progress"
            exit  1
        # If target drive not mounted, continue but log event.
        elif ! (mountpoint -q "$target")
        then
            {
            echo -e "$yellow***** Excluded  $target  drive NOT Mounted! *****$reset"
            printf "\n" 
            } | tee -a "$log_progress"
        else
        
        ############################# RSYNC BLOCK #############################
            {
            echo -e "$green$2 $target with $source $reset"
            
            ${sync_type[$3]} -rpgDvOult --progress --delete --modify-window=1 \
            --exclude-from=$exclude_list --human-readable --stats \
            "$source" "$target" | grep -Ev '/$'
                               
            printf "\n"
            } | tee -a "$log_progress"
        ############################# RSYNC BLOCK #############################

        fi
        
        # Examine rsync stats in log_progress for number files created, deleted, and transferred
        created=$(awk '/Number of created files:/ {print $5}' "$log_progress")
        deleted=$(awk '/Number of deleted files:/ {print $5}' "$log_progress")       
        xferred=$(awk '/Number of regular files transferred:/ {print $6}' "$log_progress")
        
        # If created, deleted && xferred 0, no sync needed; safely remove the target drive from target_list
        # Source: https://stackoverflow.com/questions/16860877/remove-an-element-from-a-bash-array
        if [[ "$created" -eq 0 ]] &&  [[ "$deleted" -eq 0 ]] && [[ "$xferred" -eq 0 ]]
        then
            # unset -v option source: http://wiki.bash-hackers.org/commands/builtin/unset
            # See also Destruction: http://wiki.bash-hackers.org/syntax/arrays?s[]=array
            unset -v 'target_list[i]'
        fi

    done

    # Re-index target_list array if greater than zero and shorter than original.
    if [[ "${#target_list[@]}" -gt 0 ]] && [[ "${#target_list[@]}" -lt "$list_len" ]]
    then
        temp_array=( "${target_list[@]}" )
        unset target_list
        target_list=( "${temp_array[@]}" )
        unset temp_array        
    fi
    
return 0
}

main () {
# Function controls overall program flow. Calls sync_control function; displays process messages.

    clear
    echo -e "$white""$banner1""$source" "$reset"
    for i in "${!target_list[@]}"
    do
        echo -e "$yellow" "${target_list[i]}" "$reset"
    done
    echo
    
# sync_control with option 0 == rsync --dry-run (simulate sychronization) 
    sync_control sim Simulating 0
    
    if [[ "${#target_list[@]}" -eq 0 ]]
    then
        echo -e "$green""$sim_msg2 $reset"
        rm -f /home/woods/backup_log-files/*"$now"
    else
        echo -e "$green""$sim_msg1" "$reset"
        for i in "${!target_list[@]}"
        do
            echo -e "$yellow" "${target_list[i]}" "$reset"
        done
        echo        
        
        while true
        do
            read -r -p "Enter [YES] to Sync or [q] to Quit: " answer
            case $answer in
                "YES")
# sync_control with option 1 == rsync (perform sychronization)
                    sync_control sync Synchronizing 1
                    clean_files 
                    break
                    ;;
                "q")
                    printf "\n%b%s%b\n\n" "$yellow" "$abort_msg" "$reset"
                    rm -f /home/woods/backup_log-files/*"$now"
                    break
                    ;;
                *) echo invalid response;;
            esac
        done
    fi
    
return 0
}

main
