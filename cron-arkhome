#! /usr/bin/env bash

# Author: Woods Wannamaker
# Date: 2017-06-04
# Creates new tar.gz archive of /home/woods then finds and removes oldest archive.
# Runs in cron.

#------------------------------------------------------------------------------
# Change Log
# 2017-06-04: deprecated previous version that writes tarlog since the same info is
# available via: tar -ztvpf filename.tar.gz. Added check for target mount.
# Renamed functions. Reworked tar command to remove /home/woods/ path.
# 2018-01-19: simplified clean up. EXCLUDE_LIST path changed. && added in main()
# to move only after create() succeeds. Added _ark-clean dir to clean_path after
# tests.
# 2018-02-08: check for EXCLUDE_LIST and clean_path at start; list reside in 
# xlists & renamed. Initial logic restructured: if no drive, quit; if no list,
# quit; if no clean_path, create. Functions renamed.
# 2018-02-11: simplified remove_oldest_ark cmds. Error variables added. Added
# check if oldest file exists before moving.
#------------------------------------------------------------------------------

ERROR1="Target drive not mounted! Exiting...with error code: 1"
ERROR2="Exclusion list not found! Exiting...with error code: 2"

if ! (mountpoint -q /media/woods/Misc); then
    printf "\n%s\n\n" "$ERROR1"
    exit 1
else
    _NOW=$(date +%F_%H%M%S)
    ark_path=/media/woods/Misc/home_targzip
    clean_path=/media/woods/Misc/_ark-clean/
    EXCLUDE_LIST=/home/woods/xlists/x-home_ark    

    if ! [[ -f "$EXCLUDE_LIST" ]]; then
        printf "\n%s\n\n" "$ERROR2"
        exit 2
    fi
    
    if ! [[ -d "$clean_path" ]]; then
        mkdir "$clean_path"
    fi    
fi

create_new_ark () {
# Creates archive of home directory by cd to /home/woods then tar with exclusions

    ark_file="$ark_path"/woods-home_"$_NOW".tar.gz
    cd /home/woods && tar -X "$EXCLUDE_LIST" -czpf "$ark_file" ./*
    
return 0
}

remove_oldest_ark () {
# Determines oldest archirve & moves to clean_path for user review.

    clean_file=$(find "$ark_path" -type f | sort | head -1)
    if [ -f "$clean_file" ]; then
        mv "$clean_file" "$clean_path"
    fi
    
return 0
}

main () {
# Calls functions that create new archive and remove oldest.

    create_new_ark &&
    remove_oldest_ark
    
return 0
}

main
