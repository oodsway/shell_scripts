#! /usr/bin/env bash

# Author: Woods Wannamaker
# Date: 2021-03-07
# Creates new archive of HOME; removes oldest based on value of MAX_ARK.
# Runs in cron.

#------------------------------------------------------------------------------
# Change Log
# 2021-03-07: modifed from cron-arkhome
#------------------------------------------------------------------------------

MAX_ARK=7

ERROR1="Target drive not mounted! Exiting...with error code: 1"
ERROR2="Exclusion list not found! Exiting...with error code: 2"

if ! (mountpoint -q /media/woods/Data); then
    printf "\n%s\n\n" "$ERROR1"
    exit 1
else
    _NOW=$(date +%F_%H%M%S)
    ark_path=/media/woods/Data/home_tgz
    EXCLUDE_LIST=/home/woods/xlists/x-home_ark    

    if ! [[ -f "$EXCLUDE_LIST" ]]; then
        printf "\n%s\n\n" "$ERROR2"
        exit 2
    fi

    if ! [[ -d "$ark_path" ]]; then
        mkdir "$ark_path"
    fi    
fi

create_new_ark () {
# Creates archive of home directory by cd to /home/woods then tar with exclusions

    ark_file="$ark_path"/woods-home_"$_NOW".tgz
#     touch "$ark_file"
    cd /home/woods && tar -X "$EXCLUDE_LIST" -czpf "$ark_file" ./*

return 0
}

remove_oldest_arks () {
# Removes oldest archives based on MAX_ARK.

    while [ "$( find "$ark_path" -type f  | wc -l )"  -ge "$MAX_ARK" ]
    do
        oldest_ark=$(find "$ark_path" -type f | sort | head -1)
        rm "$oldest_ark"
    done

return 0
}

main () {
# When number of archives >= MAX_ARK, delete oldest before creating new.

if [[ $( find "$ark_path" -type f  | wc -l ) -ge "$MAX_ARK" ]]; then
    remove_oldest_arks
    create_new_ark
else
    create_new_ark
fi
}

main
